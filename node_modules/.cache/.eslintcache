[{"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\index.js":"1","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\reportWebVitals.js":"2","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\App.js":"3","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\API\\API.js":"4","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\Loading\\Loading.jsx":"5","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\Tasks\\TaskList.jsx":"6","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\InputTask\\InputTask.jsx":"7","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\SortTask\\SortTask.jsx":"8","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\Pagination.jsx\\Pagination.jsx":"9","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\Button\\MyButton.jsx":"10","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\Tasks\\Task\\Task.jsx":"11","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\SortTask\\SortByDone\\SortByStatus.jsx":"12","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\SortTask\\SortByDate\\SortByDate.jsx":"13","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\InputForChangeTask\\InputForChangeTask.jsx":"14"},{"size":276,"mtime":1654858558827,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1654858558828,"results":"17","hashOfConfig":"16"},{"size":6945,"mtime":1654858558773,"results":"18","hashOfConfig":"16"},{"size":122,"mtime":1654858558769,"results":"19","hashOfConfig":"16"},{"size":436,"mtime":1654858558777,"results":"20","hashOfConfig":"16"},{"size":512,"mtime":1654858558815,"results":"21","hashOfConfig":"16"},{"size":1205,"mtime":1654858558789,"results":"22","hashOfConfig":"16"},{"size":895,"mtime":1654858558805,"results":"23","hashOfConfig":"16"},{"size":883,"mtime":1654858558792,"results":"24","hashOfConfig":"16"},{"size":423,"mtime":1654858558783,"results":"25","hashOfConfig":"16"},{"size":1975,"mtime":1654858558811,"results":"26","hashOfConfig":"16"},{"size":1474,"mtime":1654858558803,"results":"27","hashOfConfig":"16"},{"size":996,"mtime":1654858558798,"results":"28","hashOfConfig":"16"},{"size":813,"mtime":1654858558786,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"16wohou",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\index.js",["74"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n\r\n  <App />\r\n\r\n);\r\n\r\n\r\n","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\reportWebVitals.js",[],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\App.js",["75","76","77","78"],[],"import './App.css';\r\nimport InputTask from './component/InputTask/InputTask';\r\nimport SortTask from './component/SortTask/SortTask';\r\nimport TaskList from './component/Tasks/TaskList';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Pagination from './component/Pagination.jsx/Pagination';\r\nimport style from './App.module.css';\r\nimport API from './API/API.js'\r\nimport Loading from './Loading/Loading';\r\n\r\nconst FIRST = 'asc';\r\nconst LAST = 'desc';\r\nconst ALL = '';\r\n\r\nfunction App() {\r\n\r\n  const [taskList, setTaskList] = useState([])\r\n  const [toDoLength, setToDoLength] = useState(1);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [typeOfSorted, setTypeOfSorted] = useState({ typeSortedByDate: FIRST, typeSortedByStatus: ALL });\r\n  const [userID, setUserID] = useState(6);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pageForPagination, setPageForPagination] = useState(1);\r\n  const numberOfTaskOnPage = 5;\r\n\r\n  const paginate = (pageNumber) => {\r\n    setIsLoading(true);\r\n    API.get(`tasks/${userID}`, {\r\n      params: {\r\n        filterBy: typeOfSorted.typeSortedByStatus,\r\n        order: typeOfSorted.typeSortedByDate,\r\n        pp: numberOfTaskOnPage,\r\n        page: pageNumber,\r\n      }\r\n    })\r\n      .then((response) => {\r\n        setTaskList(response.data.tasks);\r\n        setToDoLength(response.data.count);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => alert(err));\r\n\r\n\r\n    setCurrentPage(pageNumber)\r\n  }\r\n\r\n  const getTaskList = async () => {\r\n    setIsLoading(true);\r\n    API.get(`tasks/${userID}`, {\r\n      params: {\r\n        filterBy: typeOfSorted.typeSortedByStatus,\r\n        order: typeOfSorted.typeSortedByDate,\r\n        pp: numberOfTaskOnPage,\r\n        page: currentPage,\r\n      }\r\n    })\r\n      .then((response) => {\r\n        setTaskList(response.data.tasks);\r\n        setToDoLength(response.data.count);\r\n        setPageForPagination(Math.ceil(response.data.count / numberOfTaskOnPage));\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => alert(err));\r\n  }\r\n\r\n  const createTask = async (taskText) => {\r\n    setIsLoading(true);\r\n    API.post(`task/${userID}`, {\r\n      name: taskText,\r\n    })\r\n      .then(() => {\r\n        let page;\r\n        typeOfSorted.typeSortedByDate === FIRST\r\n          ? page = (Math.ceil((toDoLength + 1) / numberOfTaskOnPage))\r\n          : page = 1;\r\n        setCurrentPage(page);\r\n        API.get(`tasks/${userID}`, {\r\n          params: {\r\n            filterBy: typeOfSorted.typeSortedByStatus,\r\n            order: typeOfSorted.typeSortedByDate,\r\n            pp: numberOfTaskOnPage,\r\n            page: page,\r\n          }\r\n        })\r\n          .then((response) => {\r\n            console.log(response)\r\n            setTaskList(response.data.tasks);\r\n            setPageForPagination(Math.ceil(response.data.count / numberOfTaskOnPage));\r\n            setIsLoading(false);\r\n          })\r\n      })\r\n      .catch(err => alert(err));\r\n  }\r\n\r\n  const removeTask = async (taskForRemoveID) => {\r\n    setIsLoading(true);\r\n    API.delete(`task/${userID}/${taskForRemoveID}`)\r\n      .then((response) => {\r\n        if (response.status === 204) {\r\n          getTaskList();\r\n          if (taskList.length <= 1) {\r\n            paginate(currentPage - 1)//подумать и над этим\r\n          }\r\n        }\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => alert(err));\r\n  }\r\n\r\n  const changeDone = async (taskForChange) => {\r\n    let checkboxValue;\r\n    if (taskForChange.done) {\r\n      checkboxValue = false;\r\n    } else {\r\n      checkboxValue = true;\r\n    }\r\n    setIsLoading(true);\r\n    API.patch(`task/${userID}/${taskForChange.uuid}`, {\r\n      done: checkboxValue,\r\n    })\r\n      .then((response) => {\r\n        const newTaskList = [...taskList].filter((item) => {//\r\n          if (item.uuid === taskForChange.uuid) {\r\n            item.done = response.data.done;\r\n          }\r\n          return item\r\n        })\r\n        setTaskList(newTaskList);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => alert(err));\r\n  }\r\n\r\n  const changeTaskText = async (taskForChangeID, updatedTaskText) => {\r\n    setIsLoading(true);\r\n    API.patch(`task/${userID}/${taskForChangeID}`, {\r\n      name: updatedTaskText,\r\n    })\r\n      .then((response) => {\r\n        const newTaskList = taskList.filter((item) => {\r\n          if (item.uuid === taskForChangeID) {\r\n            const itemCopy = { ...item }\r\n            itemCopy.name = response.data.name;\r\n            return itemCopy;\r\n          }\r\n          return item\r\n        })\r\n        setTaskList(newTaskList);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => alert(err));\r\n  }\r\n\r\n  const getSortByDateTaskList = async (typeSortedByDate) => {\r\n    setIsLoading(true);\r\n    API.get(`tasks/${userID}`, {\r\n      params: {\r\n        filterBy: typeOfSorted.typeSortedByStatus,\r\n        order: typeSortedByDate,\r\n        pp: numberOfTaskOnPage,\r\n        page: currentPage,\r\n      }\r\n    })\r\n      .then((response) => {\r\n        setTaskList(response.data.tasks);\r\n        setToDoLength(response.data.count);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => alert(err));\r\n  }\r\n\r\n  const getSortByStatusTaskList = async (status) => {\r\n    setCurrentPage(1)\r\n    setIsLoading(true);\r\n    API.get(`tasks/${userID}`, {\r\n      params: {\r\n        filterBy: status,\r\n        order: typeOfSorted.typeSortedByDate,\r\n        pp: numberOfTaskOnPage,\r\n        page: 1,\r\n      }\r\n    })\r\n      .then((response) => {\r\n        setTaskList(response.data.tasks);\r\n        setToDoLength(response.data.count);\r\n        setPageForPagination(Math.ceil(response.data.count / numberOfTaskOnPage));\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => alert(err));\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    getTaskList();\r\n  }, [setTaskList])\r\n\r\n  return (\r\n    <div className={style.App}>\r\n      <h1>ToDo</h1>\r\n      <div className={style.topPanel}>\r\n        <InputTask\r\n          createTask={createTask} />\r\n        <SortTask\r\n          setCurretnPage={setCurrentPage}\r\n          setTypeOfSorted={setTypeOfSorted}\r\n          typeOfSorted={typeOfSorted}\r\n          getSortByDateTaskList={getSortByDateTaskList}\r\n          getSortByStatusTaskList={getSortByStatusTaskList}\r\n        />\r\n      </div>\r\n      {isLoading\r\n        ? <Loading />\r\n        : taskList.length\r\n          ? <TaskList taskList={taskList} removeTask={removeTask}\r\n            changeDone={changeDone} changeTaskText={changeTaskText}\r\n          />\r\n          : <div><h1>no tasks</h1>\r\n            <img className={style.imgNoTask}\r\n              src='https://img.freepik.com/free-vector/coffee-quotes-svg-design-vector_22345-1171.jpg?w=740'\r\n            /></div>\r\n      }\r\n      {toDoLength > numberOfTaskOnPage &&\r\n        <Pagination\r\n          pageForPagination={pageForPagination}\r\n          paginate={paginate}\r\n          currentPage={currentPage} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\API\\API.js",[],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\Loading\\Loading.jsx",[],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\Tasks\\TaskList.jsx",["79"],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\InputTask\\InputTask.jsx",[],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\SortTask\\SortTask.jsx",["80"],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\Pagination.jsx\\Pagination.jsx",[],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\Button\\MyButton.jsx",[],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\Tasks\\Task\\Task.jsx",["81"],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\SortTask\\SortByDone\\SortByStatus.jsx",[],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\SortTask\\SortByDate\\SortByDate.jsx",[],[],"C:\\ProgrammingWorkspace\\Alpaca_education\\todo1\\src\\component\\InputForChangeTask\\InputForChangeTask.jsx",[],[],{"ruleId":"82","severity":1,"message":"83","line":5,"column":8,"nodeType":"84","messageId":"85","endLine":5,"endColumn":23},{"ruleId":"82","severity":1,"message":"86","line":12,"column":7,"nodeType":"84","messageId":"85","endLine":12,"endColumn":11},{"ruleId":"82","severity":1,"message":"87","line":21,"column":18,"nodeType":"84","messageId":"85","endLine":21,"endColumn":27},{"ruleId":"88","severity":1,"message":"89","line":195,"column":6,"nodeType":"90","endLine":195,"endColumn":19,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":218,"column":13,"nodeType":"94","endLine":220,"endColumn":15},{"ruleId":"82","severity":1,"message":"95","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"95","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"96","line":1,"column":27,"nodeType":"84","messageId":"85","endLine":1,"endColumn":36},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'LAST' is assigned a value but never used.","'setUserID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTaskList'. Either include it or remove the dependency array.","ArrayExpression",["97"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'useEffect' is defined but never used.",{"desc":"98","fix":"99"},"Update the dependencies array to be: [getTaskList, setTaskList]",{"range":"100","text":"101"},[5779,5792],"[getTaskList, setTaskList]"]